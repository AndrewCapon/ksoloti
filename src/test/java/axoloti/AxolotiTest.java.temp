package axoloti;

import axoloti.utils.OSDetect;
import axoloti.utils.OSDetect.ARCH;
import axoloti.utils.OSDetect.OS;
import axoloti.utils.Preferences;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.io.TempDir;
import org.mockito.MockedStatic;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.logging.Level;
import java.util.logging.Logger;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mockStatic;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

@DisplayName("Axoloti Core Utility Tests")
public class AxolotiTest {

    @TempDir
    Path tempDir;

    private Path homeDirPath;
    private Path librariesDirPath;
    private Path firmwareDirPath;
    private Path platformDirPath;

    private String originalHomeDirProp;
    private String originalLibrariesDirProp;
    private String originalFirmwareDirProp;
    private String originalPlatformDirProp;
    private String originalUserDirProp;

    private MockedStatic<System> mockedSystem;
    private MockedStatic<OSDetect> mockedOSDetect;
    private MockedStatic<Preferences> mockedPreferences;
    private MockedStatic<FileUtils> mockedFileUtils;
    private MockedStatic<Version> mockedVersion;


    @BeforeEach
    void setUp() throws IOException {
        /* Capture original system properties */
        originalHomeDirProp = System.getProperty(Axoloti.HOME_DIR);
        originalLibrariesDirProp = System.getProperty(Axoloti.LIBRARIES_DIR);
        originalFirmwareDirProp = System.getProperty(Axoloti.FIRMWARE_DIR);
        originalPlatformDirProp = System.getProperty(Axoloti.PLATFORM_DIR);
        originalUserDirProp = System.getProperty("user.dir");

        /* Set up temporary directories for testing */
        homeDirPath = tempDir.resolve("axoloti_home_test");
        librariesDirPath = tempDir.resolve("axoloti_libraries_test");
        firmwareDirPath = tempDir.resolve("axoloti_firmware_test");
        platformDirPath = tempDir.resolve("axoloti_platform_test");

        /* Create the directories */
        Files.createDirectories(homeDirPath);
        Files.createDirectories(librariesDirPath);
        Files.createDirectories(firmwareDirPath);
        Files.createDirectories(platformDirPath);

        /* Mock static dependencies */
        mockedSystem = mockStatic(System.class);
        mockedOSDetect = mockStatic(OSDetect.class);
        mockedPreferences = mockStatic(Preferences.class);
        mockedFileUtils = mockStatic(FileUtils.class);
        mockedVersion = mockStatic(Version.class);

        /* Default mocks for System.getProperty and getenv */
        mockedSystem.when(() -> System.getProperty(anyString())).thenCallRealMethod();
        mockedSystem.when(() -> System.getenv(anyString())).thenReturn(null);

        /* Mock OSDetect to return a consistent OS for testing - Mac has always been a problem child */
        mockedOSDetect.when(OSDetect::getOS).thenReturn(OS.MAC);
        mockedOSDetect.when(OSDetect::getArch).thenReturn(ARCH.X86_64);

        /* Mock Preferences behavior if needed, e.g., for initProperties */
        Preferences mockPreferencesInstance = mock(Preferences.class);
        mockedPreferences.when(Preferences::getInstance).thenReturn(mockPreferencesInstance);
        /* Ensure getLibraries returns an empty list or mock as needed for specific tests */
        when(mockPreferencesInstance.getLibraries()).thenReturn(new java.util.ArrayList<>());
        /* Mock applyTheme to do nothing */
        doNothing().when(mockPreferencesInstance).applyTheme();
        /* Mock LoadPreferences to do nothing */
        mockedPreferences.when(Preferences::LoadPreferences).thenAnswer(invocation -> null);

        /* Mock FileUtils.deleteDirectory to prevent actual deletion of temp dirs during tests */
        mockedFileUtils.when(() -> FileUtils.deleteDirectory(any(File.class))).thenReturn(true);

        /* Temporarily disable logging to console during tests to avoid clutter */
        Logger.getLogger("").setLevel(Level.OFF);
    }

    @AfterEach
    void tearDown() {
        /* Restore original system properties */
        if (originalHomeDirProp != null) {
            System.setProperty(Axoloti.HOME_DIR, originalHomeDirProp);
        } else {
            System.clearProperty(Axoloti.HOME_DIR);
        }
        if (originalLibrariesDirProp != null) {
            System.setProperty(Axoloti.LIBRARIES_DIR, originalLibrariesDirProp);
        } else {
            System.clearProperty(Axoloti.LIBRARIES_DIR);
        }
        if (originalFirmwareDirProp != null) {
            System.setProperty(Axoloti.FIRMWARE_DIR, originalFirmwareDirProp);
        } else {
            System.clearProperty(Axoloti.FIRMWARE_DIR);
        }
        if (originalPlatformDirProp != null) {
            System.setProperty(Axoloti.PLATFORM_DIR, originalPlatformDirProp);
        } else {
            System.clearProperty(Axoloti.PLATFORM_DIR);
        }
        if (originalUserDirProp != null) {
            System.setProperty("user.dir", originalUserDirProp);
        } else {
            System.clearProperty("user.dir");
        }

        /* Close mocked static objects */
        mockedSystem.close();
        mockedOSDetect.close();
        mockedPreferences.close();
        mockedFileUtils.close();
        mockedVersion.close();

        /* Re-enable logging */
        Logger.getLogger("").setLevel(Level.INFO);
    }

    @Test
    @DisplayName("Test BuildEnv with default value when no system property or env var")
    public void testBuildEnv_DefaultValue() {
        System.clearProperty(Axoloti.HOME_DIR);
        mockedSystem.when(() -> System.getenv(Axoloti.HOME_DIR)).thenReturn(null);

        Axoloti.BuildEnv(Axoloti.HOME_DIR, homeDirPath.toString());

        assertEquals(homeDirPath.toFile().getAbsolutePath(), System.getProperty(Axoloti.HOME_DIR));
    }

    @Test
    @DisplayName("Test BuildEnv with system property taking precedence")
    public void testBuildEnv_SystemProperty() {
        String customPath = tempDir.resolve("custom_home").toString();
        System.setProperty(Axoloti.HOME_DIR, customPath);

        Axoloti.BuildEnv(Axoloti.HOME_DIR, homeDirPath.toString());

        assertEquals(new File(customPath).getAbsolutePath(), System.getProperty(Axoloti.HOME_DIR));
    }

    @Test
    @DisplayName("Test BuildEnv with environment variable when no system property")
    public void testBuildEnv_EnvironmentVariable() {
        System.clearProperty(Axoloti.HOME_DIR);
        String envPath = tempDir.resolve("env_home").toString();
        mockedSystem.when(() -> System.getenv(Axoloti.HOME_DIR)).thenReturn(envPath);

        Axoloti.BuildEnv(Axoloti.HOME_DIR, homeDirPath.toString());

        assertEquals(new File(envPath).getAbsolutePath(), System.getProperty(Axoloti.HOME_DIR));
    }

    @Test
    @DisplayName("Test TestDir with existing directory")
    public void testTestDir_ExistingDirectory() {
        System.setProperty(Axoloti.HOME_DIR, homeDirPath.toString());
        assertTrue(Axoloti.TestDir(Axoloti.HOME_DIR));
    }

    @Test
    @DisplayName("Test TestDir with non-existent directory")
    public void testTestDir_NonExistentDirectory() {
        System.setProperty(Axoloti.HOME_DIR, tempDir.resolve("non_existent").toString());
        assertFalse(Axoloti.TestDir(Axoloti.HOME_DIR));
    }

    @Test
    @DisplayName("Test TestDir with a file instead of a directory")
    public void testTestDir_IsFile() throws IOException {
        Path filePath = tempDir.resolve("testfile.txt");
        Files.createFile(filePath);
        System.setProperty(Axoloti.HOME_DIR, filePath.toString());
        assertFalse(Axoloti.TestDir(Axoloti.HOME_DIR));
    }

    @Test
    @DisplayName("Test deletePrecompiledHeaderFile deletes xpatch.h.gch")
    public void testDeletePrecompiledHeaderFile_DeletesGch() throws IOException {
        Path buildDirPath = librariesDirPath.resolve("build");
        Files.createDirectories(buildDirPath);
        Path gchFile = buildDirPath.resolve("xpatch.h.gch");
        Files.createFile(gchFile);
        Path otherFile = buildDirPath.resolve("other.txt");
        Files.createFile(otherFile);

        System.setProperty(Axoloti.LIBRARIES_DIR, librariesDirPath.toString());

        /* Ensure FileUtils.deleteDirectory is called for directories, but not for files. */
        /* We are testing Axoloti's logic, not FileUtils's. */
        mockedFileUtils.when(() -> FileUtils.deleteDirectory(any(File.class))).thenCallRealMethod();

        Axoloti.deletePrecompiledHeaderFile();

        assertFalse(Files.exists(gchFile), "xpatch.h.gch should be deleted");
        assertTrue(Files.exists(otherFile), "other.txt should not be deleted");
    }

    @Test
    @DisplayName("Test deletePrecompiledHeaderFile handles subdirectories")
    public void testDeletePrecompiledHeaderFile_HandlesSubdirectories() throws IOException {
        Path buildDirPath = librariesDirPath.resolve("build");
        Files.createDirectories(buildDirPath);
        Path subDir = buildDirPath.resolve("subdir");
        Files.createDirectories(subDir);
        Path fileInSubDir = subDir.resolve("somefile.txt");
        Files.createFile(fileInSubDir);

        System.setProperty(Axoloti.LIBRARIES_DIR, librariesDirPath.toString());

        /* Mock FileUtils.deleteDirectory to confirm it's called for the subdirectory */
        mockedFileUtils.when(() -> FileUtils.deleteDirectory(subDir.toFile())).thenReturn(true);

        Axoloti.deletePrecompiledHeaderFile();

        /* Verify that deleteDirectory was called for the subdirectory */
        mockedFileUtils.verify(() -> FileUtils.deleteDirectory(subDir.toFile()), times(1));
        /* We don't assert Files.exists(subDir) here because FileUtils.deleteDirectory is mocked */
        /* and its real behavior (deleting) is not being tested here, only that it's called. */
    }

    @Test
    @DisplayName("Test isDeveloper when firmware directory matches release and .git exists")
    public void testIsDeveloper_GitExists() throws IOException {
        /* Simulate HOME_DIR and FIRMWARE_DIR pointing to the same location, */
        /* and a .git directory existing in HOME_DIR */
        Path homeAndFirmwareDir = tempDir.resolve("dev_project_root");
        Files.createDirectories(homeAndFirmwareDir);
        Files.createDirectory(homeAndFirmwareDir.resolve(".git"));

        System.setProperty(Axoloti.HOME_DIR, homeAndFirmwareDir.toString());
        System.setProperty(Axoloti.FIRMWARE_DIR, homeAndFirmwareDir.toString());

        /* Clear cache before test */
        Axoloti.isDeveloper();
        Axoloti.isDeveloper();

        assertTrue(Axoloti.isDeveloper(), "Should be developer if .git exists in HOME_DIR and firmware matches");
    }

    @Test
    @DisplayName("Test isDeveloper when firmware directory is different from release (custom build)")
    public void testIsDeveloper_CustomFirmwareDir() throws IOException {
        /* Simulate HOME_DIR being default, but FIRMWARE_DIR pointing to a different custom location */
        Path releaseHome = tempDir.resolve("release_home");
        Path customFirmware = tempDir.resolve("custom_firmware");
        Files.createDirectories(releaseHome);
        Files.createDirectories(customFirmware);

        System.setProperty(Axoloti.HOME_DIR, releaseHome.toString());
        System.setProperty(Axoloti.FIRMWARE_DIR, customFirmware.toString());

        /* Clear cache before test */
        Axoloti.isDeveloper();
        Axoloti.isDeveloper();

        assertTrue(Axoloti.isDeveloper(), "Should be developer if firmware directory is different from release");
    }

    @Test
    @DisplayName("Test isDeveloper when firmware directory matches release and .git does NOT exist")
    public void testIsDeveloper_NoGit() throws IOException {
        /* Simulate HOME_DIR and FIRMWARE_DIR pointing to the same location, */
        /* but no .git directory exists (standard release scenario) */
        Path releaseHome = tempDir.resolve("release_home_no_git");
        Files.createDirectories(releaseHome);

        System.setProperty(Axoloti.HOME_DIR, releaseHome.toString());
        System.setProperty(Axoloti.FIRMWARE_DIR, releaseHome.toString());

        /* Clear cache before test */
        Axoloti.isDeveloper();
        Axoloti.isDeveloper();

        assertFalse(Axoloti.isDeveloper(), "Should NOT be developer if .git does not exist and firmware matches");
    }

    @Test
    @DisplayName("Test isDeveloper cache mechanism")
    public void testIsDeveloper_Cache() throws IOException {
        /* Set up initial state for non-developer */
        Path releaseHome = tempDir.resolve("cached_release_home");
        Files.createDirectories(releaseHome);
        System.setProperty(Axoloti.HOME_DIR, releaseHome.toString());
        System.setProperty(Axoloti.FIRMWARE_DIR, releaseHome.toString());
        Axoloti.isDeveloper();

        /* Change conditions to developer mode, but without changing FIRMWARE_DIR */
        /* This should NOT affect the cached value */
        Files.createDirectory(releaseHome.resolve(".git"));
        
        assertFalse(Axoloti.isDeveloper(), "Should return cached false because FIRMWARE_DIR hasn't changed");

        /* Now change FIRMWARE_DIR, which should invalidate cache and re-evaluate */
        Path newFirmwareDir = tempDir.resolve("new_firmware_dir");
        Files.createDirectories(newFirmwareDir);
        System.setProperty(Axoloti.FIRMWARE_DIR, newFirmwareDir.toString());

        assertTrue(Axoloti.isDeveloper(), "Should re-evaluate and return true after FIRMWARE_DIR changes");
    }
}
